options
{
	IGNORE_CASE = true;
	STATIC = false;
//	LOOKAHEAD = 2147483647;
//	FORCE_LA_CHECK = true;
	DEBUG_PARSER = true;
}

PARSER_BEGIN(AbilityParser)

package org.rnd.jmagic.cardscript;

public class AbilityParser
{
	private static String replace(String ability)	{		return ability.replace(".\"", "\".");
	}
	
	public static void parsePermanentAbility(String ability) throws ParseException
	{
		ability = replace(ability);
		java.io.InputStream is = new java.io.ByteArrayInputStream( ability.getBytes() );
		AbilityParser p = new AbilityParser(is);
		p.permanentability();
	}
	
	public static void parseSpellAbility(String ability) throws ParseException
	{
		ability = replace(ability);
		java.io.InputStream is = new java.io.ByteArrayInputStream( ability.getBytes() );
		AbilityParser p = new AbilityParser(is);
		p.spellability();
	}
}

PARSER_END(AbilityParser)

void spellability() : {}{
	(
		// Bullet for a modal spell
		"\u2022"
		effects()
		"."
	|			effects()
		// The "Choose" line of a modal ability doesn't end with a period
		(".")?
	|
		spell_limits()
	|
		staticability()
	)

	(		"\n"
		spellability()
	)?}

void permanentability() : {}
{
	(
		triggeredability()
	|
		activatedability()
	|
		staticability()
	|
		< KEYWORD >
	)

	(		"\n"
		permanentability()
	)?
}

void staticability() : {}{
	(		as_long_as()
		","
	)?

	(		static_effects()
	|
		// Replacement effects
		"as"
		selectors()
		pattern()
		","
		effects()
	)
	"."
}

void as_long_as() : {}
{
	("as long as"|"for as long as")
	selectors()
	pattern()
}

void static_effects() : {}
{
	static_effect()

	(		LOOKAHEAD("and" static_effect())
		"and"
		static_effects()
	)?
}

void static_effect() : {}
{
	(
		"any time you could activate a mana ability, you may pay 1 life"
	|
		"instead of"
		pattern()
		","
		selectors()
		effects()
	|		LOOKAHEAD(2)		"it"		"'s"
		("a"|"an")
		(attribute())+		modifiers()
	|
		"its power and toughness"
		"are each"
		generator()
	|
		"spend only"
		< COLOR >
		"mana on X"
	|	
		selectors()
		static_selector_effects()
	)

	(		", where X is"
		generator()

		(			", and Y is"
			generator()
		)?
	)?
}

void static_selector_effects() : {}
{
	static_selector_effect()

	(		LOOKAHEAD("and" static_selector_effect())
		"and"
		static_selector_effects()
	)?
}

void static_selector_effect() : {}
{
	(
		"are"
		attribute()
	|	
		"can attack as though it didn't have defender"
	|
		"can't be blocked"
	|	
		"can't be enchanted by"
		selectors()
	|
		"control"
		selectors()
	|
		"cost"
		< MANA >
		("more"|"less")
		"to"
		("cast"|"activate")
	|
		"doesn't untap during your untap step"
	|
		"enters the battlefield"
		(
			"with"
			quantity()
			< COUNTERTYPE >
			("s")?
			"on"
			"it"
		)
	|
		"gain"
		("s")?
		(
			< STRING >
		|	
			< KEYWORD >
		)
	|	
		"get"
		("s")?
		(
			(< SIGNED_INTEGER >|< SIGNED_VARIABLE >)
			"/"
			(< SIGNED_INTEGER >|< SIGNED_VARIABLE >)
		)
	|
		("has"|"have")
		(
			< KEYWORD >
			(". This effect doesn't remove ~")?
		|
			< STRING >
		)
	|
		"is a"
		< LANDTYPE >
	|
		"may have"
		selectors()
		(
			"block"
			selectors()
		|				"enter the battlefield as a copy of"
			selectors()
			modifiers()
			(				(", except it's an"|", except it's a")
				< TYPE >
				"in addition to its other types"
			)?
		)
	|
		"may play any number of lands on each of your turns"
	)}

void activatedability() : {}
{
	activatedcost()
	(		","
		activatedcost()
	)*
	":"
	effects()
	"."
	(		"Activate this ability"
		activatedability_limits()
		"."
	|
		"If this ability has been activated four or more times this turn, sacrifice ~ at the beginning of the next end step."
	|
		"Any player may activate this ability"
		(", but only if he or she owns ~")?
		"."
	|
		"X can't be 0."
	)?
}

void activatedability_limits() : {}
{
	"only"
	(
		"during"
		phaseorstep()
	|
		"if you have exactly seven cards in hand"
	|
		"once each turn"
	)

	(		"and"
		activatedability_limits()
	)?
}

void spell_limits() : {}{	(		"Cast ~ only"
		(			"before"
		|
			"during"
		)
		phaseorstep()

		("before blockers are declared")?
	)
}

void triggeredability() : {}
{
	condition()
	","
	(		"unless"
		selectors()
		cost()
		","
	)?
	effects()
	"."
}

void condition() : {}{	(
		(
			"when" | "whenever"
		)
		(
			selectors()
			pattern()
			(
				"or"
				(selectors())?
				pattern()
			)?
			(
				"by"
				selectors()
			)?
		|
			"there are"
			generator()
		)
	|
		"at"
		phaseorstep()
	)
}

void phaseorstep() : {}{
	(
		("the end of"|"end of")
	|
		("the beginning of"|"beginning of")
	)?
		
	(
		"each player's"
	|
		"each"
	|	
		"your"
	|
		"the chosen player's"
	|
		"the"
	|
		// Necessary because of other places that use this token and can't use
		// shorter tokens.
		"the next"
	|
		"his or her"
	)?

	("next")?
	
	(
		"combat"
	|
		"combat damage"
	|
		"declare attackers"
	|
		"declare blockers"
	|		
		"upkeep"
	|
		"draw"
	|
		"end"
	|
		"turn"
	)
	("step")?

	(
		"of"
		selectors()
	|
		"on your turn"
	)?
}

void pattern() : {}
{	(
		"activates an"
		(			selectors()
		)
	|	
		"attacked or blocked this combat"
	|	
		"attacks"
		("and isn't blocked")?
	|	
		"blocks"
	|
		"came under your control this turn"
	|
		"can't"
	|
		"cast"
		("s")?		selectors()
	|
		"control"
		("s")?
		generator()
	|	
		"deals"
		"damage"
		(			"to"
			selectors()
		)?
		("this way")?
	|
		"declaring blockers"
	|
		"didn't attack this turn"
	|	
		"dies"
	|
		("do"|"does")
	|	
		"enters the battlefield"
	|
		"has"
		(
			< KEYWORD >
		|
			"more life than each other player"
		|
			"a"
			< COUNTERTYPE >
			"on"
			"it"
		)
	|
		("is dealt damage"|"'re dealt damage")
	|
		("is"|"become")
		("s")?
		(
			LOOKAHEAD(attribute())			attribute()
		|
			modifier()
		)+
		("for mana")?
	|	
		"is put"
		(			"into a graveyard"
			(				"from the battlefield"
			)?
		)
	|
		"isn't"
		selectors()
	|
		"leaves the battlefield"
	|
		"lose the flip"
	|
		"pay"
	|
		"play"
		selectors()
	|	
		"taps"
		selectors()
		("for mana")?
	|
		"wasn't the first land you played this turn"
	|
		("would deal damage to"|"would deal combat damage to")
		selectors()
		"this turn"
	|
		"would draw a card this turn"
	)
}

void generator() : {}
{
	("half")?
	
	(
		"the amount of"
	|			"the number of"
	|
		"no"
	|
		"for"
	|
		"equal to the number of"
	|
		"equal to"
	)

	countable()

	(		"minus"
		< INTEGER >
	|
		", rounded down"
	|
		", rounded up"
	)?
}

void effects() : {}{
	effect()
	(
		LOOKAHEAD(("and"|","|", then"|"."|". then") effect())
		(
			"and"		|
			","
		|	
			", then"
		|
			"."
		|
			". then"
		)
		effects()
	)?
}

void effect() :
{
	Token token;
}
{
	(		"if"
		(			selectors()
			pattern()
		|
			generator()
			(				"are"
				modifier()
			)?
		)
		","
	)?
	(selectors())?
	("may")?
	(
		cost()
		(
			generator()
		)?
	|
		LOOKAHEAD(static_selector_effect() ("this turn"|"until end of turn")?)
		static_selector_effect()
		("this turn"|"until end of turn"|as_long_as())?
	|
		LOOKAHEAD("until end of turn," static_effect())
		"until end of turn,"
		static_effect()
	|	
		"activates a mana ability of each land he or she controls"
	|	
		"add"
		("s")?
		(
			< NUMBERWORD >
			"mana"
		|
			< MANA >
		)
		("of any color"|"of any one color")?
		(			"to his or her mana pool"
		|
			"to your mana pool"
		)
		("of any type that land produced")?
	|
		"attaches"
		selectors()
		"to"
		selectors()
	|
		"become"
		("s")?
		(
			LOOKAHEAD(("a") < TOKEN_DEFINITION >)
			("a")
			< TOKEN_DEFINITION >
		|				selectors()
		)
		(until())?
	|
		"blocks each attacking creature this turn if able"
	|	
		"can block any number of creatures this turn"
	|
		"choose"
		("s")?
		(
			LOOKAHEAD(quantity() "\u2014")
			quantity()
			"\u2014"
			// This ends the current line, the choices are on following lines.
		|	
			(quantity())?			selectors()
			(generator())?
		|
			"a number between"
			< INTEGER >
			"and"
			< INTEGER >
		)
	|
		"copy"
		selectors()
		", except that the copy is"
		< COLOR >
		". You may choose new targets for the copy"
	|	
		"counter"
		selectors()
	|	
		"deals"
		damage()
		(
			LOOKAHEAD("and" damage())			"and"
			damage()
		)?
	|
		"destroy"
		selectors()
		(". It can't be regenerated"|". They can't be regenerated")?
		(". Ignore this effect for each creature the player didn't control continuously since the beginning of the turn")?
		(". If two or more creatures are tied for least power, you choose one of them")?
	|	
		"draw"
		("s")?
		(
			quantity()
		|			"an additional"
		)
		"card"
		("s")?
	|
		"exile"
		(quantity())?
		selectors()
	|	
		"flip a coin"
	|	
		"gain"
		(
			quantity()
			"life"
		|
			"life"
			"equal to"
			selectors()
		)
	|
		"has"
		(			"base power"
			< INTEGER >
		)
		until()
	|
		"look at"
		selectors()
	|	
		"lose the game"
	|
		"loses"
		quantity()
		"life"
		(", rounded up"|", rounded down")?
	|	
		"put"
		(
			LOOKAHEAD(quantity() < COUNTERTYPE >)
			quantity()
			token = < COUNTERTYPE >
			("s")?
			("on"|"from")
			selectors()
			(
				generator()
			)?
			(				". This ability can't cause the total number of +1/+0 counters on ~ to be greater than seven"
			)?
		|
			LOOKAHEAD("a" < TOKEN_DEFINITION > "token")
			"a"
			< TOKEN_DEFINITION >
			"token"
			modifiers()
			"onto the battlefield"
			(condition())?
			(				". They each have"
				(< KEYWORD > | < STRING >)
				(					"and"
					(< KEYWORD > | < STRING >)
				)?
			)?
		|
			(quantity())?
			selectors()
			(				"onto the battlefield"
			|
				"on the bottom of your library in a random order"
			|
				"into"
				zone()
			)
		)
	|
		"prevent"
		(
			"all combat damage that would be dealt this turn"
		|	
			"that damage"
		|				quantity()
			"of that damage"
		|
			"the next"
			quantity()
			"damage that would be dealt to"
			selectors()
			"this turn"
		)
	|
		"regenerate"
		selectors()
	|	
		"return"
		selectors()
		"to the battlefield under its owner's control"
		(
			LOOKAHEAD(attribute())
			attribute()
		|
			modifier()
		)*
	|
		"search"
		zone()
		"for"
		quantity()
		attribute()
	|
		"shuffle"
		zone()
	|
		"take an extra turn after this one"
	|
		"tap"
		selectors()
	|
		"the next"
		< INTEGER >
		"damage that would be dealt to"
		selectors()
		"this turn is dealt to"
		selectors()
		"instead"
	|
		"the next time"
		selectors()
		pattern()
		","
		("instead")?
		effects()
		("instead")?
	|
		"this turn"
		","
		static_effect()
	|
		"untap"
		selectors()
	|
		until()
		","
		static_effect()
	|
		"win the flip"
	)
	
	(condition())?
	
	(		(", where X is")?
		generator()
	)?
	
	(		"unless"
		selectors()
		(
			LOOKAHEAD(cost())
			cost()
		|				pattern()
		)
	)?
}

void damage() : {}{
	(
		(quantity())?
		"damage"
	|
		"that damage"
	)
	(
		"divided evenly, rounded down,"
	|	
		generator()
	)?
	("to"|"among")
	(quantity())?
	selectors()}

void until() : {}
{
	"until"
	(		phaseorstep()
	|
		selectors()
		pattern()
	)
}

void activatedcost() : {}
{	(		< TAP >
	|
		< MANA >
	|
		"{X}"
	|
		cost()
	)
}

void cost() : {}
{
	(
		"discard"
		("s")?
		(			(
				quantity()
			|
				"an additional"
			)
			"card"
			("s")?
			("at random")?
		|
			selector()
		)
	|			"pay"
		("s")?
		(
			< MANA >
			(
				generator()
			)?
		|
			< INTEGER >
			"life"
		|
			"any amount of mana"
		)

		("before that draw step")?
	|
		"remove"
		(			quantity()
			token = < COUNTERTYPE >
			("s")?
			("on"|"from")
			selectors()
			(
				generator()
			)?
		|
			selectors()
			"from combat"
		)
	|	
		"sacrifice"
		("s")?
		(quantity())?
		selectors()	)
}

void quantity() : {}
{
	("up to")?
	
	(
		"a"
	|
		"a number of"
	|
		< NUMBERWORD >
	|	
		< INTEGER >
	|
		"X"
	|
		"that"
	|
		"that many"
	|
		"that much"	
	|
		"half his or her"
	|
		"any number of"
	|
		"all but"
		(			< INTEGER >
		|
			< NUMBERWORD >
		)
	)
}

void selectors() : {}{	selector()

	(
		LOOKAHEAD(
			("," selector())*
			(
				("and"|", and") selector() ("or"|".")
			|
				("or"|", or") selector() ("and"|"."|"this turn")
			)
		)
		(
			","
			selector()
		)*

		selector_final()
	)?
}

void selector_final() : {}{
	(
		("and"|", and")
		selector()
	|
		("or"|", or")
		selector()
	)}

void selector() : {}
{	(
		"you"
	|
		"he or she"
	|
		"~"
	|
		"of them"
	|		"it"
		modifiers()
	|
		"the rest"
	|
		"target"
		target_selector()	|
		("a"|"an"|"all"|"each"|"the chosen"|"the other"|"the"|"that"|"those"|"other"|"any")?
		(attribute())+
		("s")?
		modifiers()
	)
}

void target_selector() : {}{	(		(attribute())+
		modifiers()
	)

	(		(			","
			target_selector()
		)+
		", or"
		target_selector()
	|
		"or"
		target_selector()
	)?
}

void countable() : {}{
	(
		LOOKAHEAD(2)
		("each")?		(
			(< COUNTERTYPE > | "counter")
		|	
			"mana"
		)
		("s")?
		modifiers()
	|
		selectors()
	)
}

void attribute() : {}{
	("non"("-")?)?
	(
		"ability of"
	|
		"activated abilities of"
	|
		"active player"
	|
		"attacking"
	|
		"blocked"
	|	
		"card"
	|
		"colorless"
	|
		"copy of"
	|
		"defending player"
	|	
		"enchanted"
	|
		"exiled"
	|
		"last card you drew this turn"
	|
		"mana"
	|	
		"opponent"
	|
		"permanent"
	|
		"player"
	|
		"sacrificed"
	|	
		"source"
	|
		"spell"
	|	
		"tapped"
	|	
		"token"
	|
		"top"
		quantity()
	|
		"unblocked"
	|
		"untapped"
	|
		< COLOR >
	|	
		< TYPE >
	|
		< LANDTYPE >
	|
		< CREATURETYPE >
	|
		< ENCHANTMENTTYPE >
	|
		< COUNTERTYPE >
	)
}

void modifiers() : {}
{
	(modifier())*
}

void modifier() : {}
{	(
		LOOKAHEAD(selectors() ("has controlled"|"control"))
		selectors()
		(
			"has controlled"
			"continuously since"
			phaseorstep()
		|
			"control"
			("s")?
		)
	|
		"'s ability"
	|
		("'s controller"|"s controller")
	|
		"s converted mana cost"
	|
		"'s hand"
	|
		("'s owner"|"s owner")
	|
		"'s power"
	|
		"'s toughness"
	|	
		"an opponent controls"
	|
		"attached to it"
	|
		"blocking or blocked by it"
	|
		"chosen this way"
	|
		"controlled by"
		selectors()
	|
		"dealt damage by"
		selectors()
		"this turn"
	|
		"defending player controls"
	|
		"he or she controlled at the beginning of this turn"
	|
		"in your graveyard"
		("with three or more creature cards above it")?
	|
		("in your hand"|"in his or her hand")
	|
		("it was blocking that had become blocked by only ~ this combat"|"it was blocking that had become blocked by only that creature this combat")
	|
		< NAMED >
		// Switch to the NAMING_STATE lexical state in order to accept any type
		// of token for the name.  After a space is encountered, the state will
		// revert back to DEFAULT.
		(< NAMING_STATE_CHARACTER >)+
	|
		"of an opponent's choice"
	|
		"of his or her choice"
	|
		"of the chosen color"
	|
		"of your choice"
	|
		"of your library"
	|
		"on"
		selectors()
	|
		"on the battlefield"
	|	
		"originally printed in the Arabian Nights expansion"
	|
		"other than ~"
	|
		"that player paid this way"
	|
		"put onto the battlefield with ~"
	|
		"that didn't attack this turn"
	|
		"that died this turn"
	|
		"who controls the fewest"
	|	
		"whose mana cost could be paid by some amount of, or all of, the mana you spent on {X}"	|
		("with"|"without")
		(			(				"the most"
			|
				"the least"
			)
			(				"power"
			|
				"life"
			)
		|
			("power"|"toughness"|"power and toughness")
			(				quantity()
				"or less"
			|
				"less than"
				selectors()
			|
				"each"
				generator()
			)
		|
			< KEYWORD >
		|
			"the noted number and kind of counters on it"
		|
			quantity()
			< COUNTERTYPE >
			("s")?
			"on"
			"it"
		)
	|
		"without {T} in its activation cost"	)
}

void zone(): {}{
	(		"your"

		(
			"library"
		|
			"hand"
		)
	)}


SKIP:
{
	" "
}

TOKEN :
{
	<#DIGIT: ["0"-"9"] >
|
	<INTEGER: (<DIGIT>)+ >
|
	<SIGNED_INTEGER: ("-"|"+") <INTEGER> >
|
	<SIGNED_VARIABLE: ("-"|"+") ("X"|"Y") >
|
	<NUMBERWORD: ("one"|"two"|"three"|"seven") >
|
	<STRING: "\"" (~["\""])+ "\"" >
|
	<#CHARACTER: (<DIGIT>|["a"-"z","A"-"Z"]) >
|
	<COLOR: "white"|"blue"|"black"|"red"|"green" >
|
	<MANA: ( "{" ("W"|"U"|"B"|"R"|"G"|<DIGIT>)+ "}" )+ >
|
	<TAP: ( "{T}" ) >
|
	<SUPERTYPE: "basic"|"legendary"|"snow"|"world" >
|
	<TYPE: ("artifact"|"creature"|"enchantment"|"instant"|"land"|"plane"|"planeswalker"|"sorcery"|"tribal") >
|
	<COUNTERTYPE: ("corpse" | "doom" | "mire" | "vitality" | "wind" | <SIGNED_INTEGER>"/"<SIGNED_INTEGER>) " counter" >
|
	<LANDTYPE: ("plains"|"island"|"swamp"|"mountain"|"forest") >
|
	<CREATURETYPE: ("bird"|"djinn"|"efreet"|"elephant"|"goblin"|"golem"|"insect"|"tetravite"|"wall"|"zombie") >
|	
	<ENCHANTMENTTYPE: ("aura") >
|
	<KEYWORD:
		<LANDTYPE>"walk" |
		"banding" |
		"enchant " (< TYPE > | < CREATURETYPE >) |
		"fear" |
		"first strike" |
		"flying" |
		"indestructible" |
		"protection from " < COLOR > |
		"reach" |
		"trample" >
|
	<TOKEN_DEFINITION: < INTEGER > "/" < INTEGER > (" " (< COLOR > | "colorless"))* (" " < CREATURETYPE >)* (" " < TYPE >)+ >
|
	< NAMED: "named " > : NAMING_STATE 
}

< NAMING_STATE > TOKEN :{
	< NAMING_STATE_CHARACTER: ~[" "] >}

< NAMING_STATE > SKIP :{	< NAMING_STATE_SPACE: " " > : DEFAULT
}
